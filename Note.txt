 Javascript
------------
- JS can be used in both front-end as well as back-end
- to provide behaviour - front-end
- to do logical operations- back-end
- is a single thread programming language - line by line execution
- dynamically typed language - dataType can be changed

js is compiled using node.
extention: .js

display content - console.log();

DATA TYPES - total no.of data-type 8 
----------
1) string - single / double quotes
2) boolean - true or false
3) number - integer/decimal
4) object 

method to check data-type - typeOf()

concatenation - to join/add same or different dataType
-------------
string + string = string
string + number = string
number + number = number

string* number = number
Number(str)

Variables
---------
-used to store data
-to create variables - identifiers -
     set of rules to create variables.
   rules: 1) start with letter, $, _ :prefer letter
          2) subsequent characters can be letters, digits, underscore
          3) if there is more than 1 word : 
               - 2nd word can be started with capital letter
               - use underscore between the words
               - no space between the words

   variableName = value;

   keyword variableName = value;

   keyword - set of reserved words which gives a special meaning to variables.
           - cannot be used as variable-name , fn name etc.
     1) const - value doesn't change - re-assigning is not possible
                    - hoisting is not possible
     2) var - value changes throughout - re-assigning is possible
                    - hoisting is possible
     3) let - re-assigning is possible
            - block level access
            - hoisting is not possible

- hoisting : using variables before it is declared/created

template literals
-----------------
- it's a way of displaying content.
  `content ${variables}`

  Operator
  --------
  1) Assignment : =
  2) Arithmetic : 
        addition : +
        substraction : -
        division : /
        multiplication : *
        modules : %
        exponential : power **
  3) Relational : returns true/false
        > , < , <= ,>= , ==, ===
        = :assigns value
        == : checks values
        === : checks values and dataType.
  4) Logical : joins two or more relational Operators
               returns true/false
        AND (&&)
        T && T = T 
        T && F = F
        F && T = F
        F && F = F
        OR (||)
        T || T = T 
        T || F = T
        F || T = T
        F || F = F
        NOT (!)
        !T = F 
        !F = T 
  5) increment/decrement :
     (++) (--)
     x = 10
     x++ = 10+1 = 11
     x-- = 10-1 = 9
  6) shorthand operator :
     x = x+y : x+=y
     x = x-y : x-=y
  7) ternary :
     condition?true 'statement' : false 'statement' 

  conditional statements/decision making statements
  -------------------------------------------------
  1) if-else
        if(condition){
            statement
        }
        else if{
            statement
        }
        else{
            statement
        }
  2) while
  Looping statement
  ------------------
  -to do task repeatedly
  1)while Loop

  syntax
  ------
  variable initialisation
  while(condition){
      task
      condition to exit the loop(increment/decrement)
  }
  
  2)for Loop

  syntax
  ------
  for(initialisation;condition;exit)
  {
        statements;      
  }

--break : 
nested loop - loop within a loop
-------------------------------------------
  math.floor() :removes decimal points

  functions
  ---------
1=>) Normal function
  -used to do same task repeatedly at different locations.
  -it has 2 parts
  1) function definition
      -task to do repeatedly in different locations
      -syntax
      --------
      function function_name(arg1.....argn){
            task;
      }
      arg-variables to do additional data
  2) function call
      -to execute task
      -syntax
      --------
      function_name(arg1.....argn);
     
   functional hoisting : to call a function before its definition
   function hoisting can be done for normal function
 
 return a variable to access it outside the function

 2=>) Arrow function
      better performance than normal function
      syntax
      ------
      function definition:
      keyword variable = (arg1.....argn) =>{

      }

      function call:
      variable();

3=>) Predefined function:
      already defined fns
     eg. console.log(),ParseInt(),math.floor(),typeOf() : fn call

4=>) Call Back function:
      a function calling another function.

      setTimeOut : Predefined callback function
            to execute a piece of code with time delay

5=>) Asynchronous functions: functions which has time delay
eg: setTimeOut, api calls
6=>) Synchronous functions: functions which doesn't have any time delay

7=>) Nested functions:function definition inside another function
     closure property: fn/variable inside parent can be accesssed inside child
                       variables inside child cannot be accessed inside parent  

DATASTRUCTURE
-------------
-format of organizing, retrieving, processing and storing data.

eg: array, list, linkedlist, stack, queue, tree graph

Array
-----
-unlike variables,array can store more than one data/value.
-can store more than one dataType.
-array in js is infinite.

-definition - array is singl variable that can store more than one value of different dataType 
that are separated by commas and enclosed within square bracket 

-store - key:value

key: index position
value: data

index - indicates the position of elements in an array
index value 
      starts from : 0  
      ends at : length-1

length : no,of items/ data inside the array
  start from 1

representation/syntax :
      keyword variable = [item1,......,itemN]

Array operations
----------------
1) push() : to add data to an array 'at the end'
2) unshift() : to add data to an array 'at the beginning'
3) pop() : to remove an item from array 'at the end'
4) shift() : to remove item from array 'at the beginning'
5) sort() : to arrange the array
6) forEach() : to access each item from array - it returns void
7) map(callback) : it creates a new array having same number of elements in the parent array
8) reduce(callback) :expecting a single value. eg. highest,lowest,sum
9) filter() : to create a new array having elements that satisfy a particular condition
10)flat() : to change the dimension
11)some() : returns boolean value based on condition
12)find() : returns first value of array that satisfy a particular condition
13)includes(): returns boolean value based on items
14)reduceRight()-iterationstarts from right
depth: infinite

different way of accessing array elements
-----------------------------------------
1)for loop
      for(index=0;index<fruits.length;index++){
            console.log(fruits[index]);
      }
2)for in - directly access the index of an array
      for(let y in fruits){
            console.log(y);
      }
3)for of - directly acces the value of an array
      for(let z of fruits){
            console.log(z);
      }


truthy operator: only if condition is present

Linear Search : checking each value one by one.
                program efficiency is decreased. 
Binary Search : requires only half time of linear search.i.e, time delay is reduced  


string methods
--------------
1)toLowerCase() - convert string into small letters
2)toUpperCase() - convert string into capital letters
3)subString(start,end) - exclude the end index                  
4)startsWith() - checks whether the given string is starts with a particular character and returns boolean value
               - it is case sensitive
5)endsWith() - checks whether the given string is ends with a particular character and returns boolean value
             - it is case sensitive
6)trim() - it removes space at the beginning and end of the string
7)split()- used to split the given string
         - gives an array
8)Array.from()
9)replace() - replaces 1st word that matches satisfying condition
      case sensitive
10)replaceAll() -replaces all words that matches satisfying condition
      case sensitive
11)slice(start,end)


Object
------
-object can store more than 1 value with more clarity to the stored data
-stored as key , value pairs
-syntax:
      objectName = {
            key : value,
            key1 : value1,
            .
            .
            keyN : valueN
      }

operations
----------
-access values using key:
1) Add an item
      1) objectName["key"]=value
      2) Object.assign(target,{key:value})  
            target is objectname
2) Delete 
      delete objectName.key
3) Update
      objectName["key"]=value
4) Get
      1)objectName["key"]   : key can be variable,exact key
      2)objectName.key      : requires exact key

- to access key
- in : 

spread operator :  (...) to merge two arrays
05/03/2024  -procedural programming finished
----------

